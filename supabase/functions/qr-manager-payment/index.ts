import { serve } from "https://deno.land/std@0.190.0/http/server.ts"
import { corsHeaders } from '../_shared/cors.ts'

console.log("üöÄ QR Manager Payment Function Started")

interface CustomerData {
  firstName: string;
  lastName: string;
  phone: string;
  email: string;
  comment?: string;
}

interface PaymentRequest {
  action: string;
  amount?: number;
  orderId?: string;
  customerData?: CustomerData;
  paymentId?: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  // Handle GET requests for health check
  if (req.method === 'GET') {
    return new Response(
      JSON.stringify({ status: 'QR Manager Payment Service is running' }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }

  try {
    const requestData: PaymentRequest = await req.json()
    console.log("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å QR Manager:", JSON.stringify(requestData, null, 2))

    // –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ QR Manager –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const qrManagerApiKey = Deno.env.get('QR_MANAGER_API_KEY')
    const qrManagerMerchantId = Deno.env.get('QR_MANAGER_MERCHANT_ID')
    const qrManagerApiUrl = Deno.env.get('QR_MANAGER_API_URL') || 'https://app.wapiserv.qrm.ooo'

    console.log("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤:", {
      hasApiKey: !!qrManagerApiKey,
      hasMerchantId: !!qrManagerMerchantId,
      apiUrl: qrManagerApiUrl,
      apiKeyLength: qrManagerApiKey ? qrManagerApiKey.length : 0
    })

    if (!qrManagerApiKey || !qrManagerMerchantId) {
      console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ QR Manager")
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'QR Manager credentials not configured',
          details: {
            hasApiKey: !!qrManagerApiKey,
            hasMerchantId: !!qrManagerMerchantId
          }
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 400
        }
      )
    }

    if (requestData.action === 'init') {
      const { amount, orderId, customerData } = requestData

      if (!amount || !orderId || !customerData) {
        return new Response(
          JSON.stringify({ 
            success: false, 
            error: 'Missing required fields: amount, orderId, customerData' 
          }),
          { 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 400
          }
        )
      }

      console.log("üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ QR Manager:", {
        amount,
        orderId,
        customer: `${customerData.firstName} ${customerData.lastName}`
      })

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è QR Manager API —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const paymentParams = {
        sum: amount * 100, // –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (API –æ–∂–∏–¥–∞–µ—Ç –∫–æ–ø–µ–π–∫–∏)
        qr_size: 400, // –†–∞–∑–º–µ—Ä QR –∫–æ–¥–∞
        payment_purpose: `Order ${orderId}`, // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        merchant_order_id: orderId, // –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        // –£–±–∏—Ä–∞–µ–º notification_url - –Ω–µ –Ω—É–∂–µ–Ω –≤–µ–±—Ö—É–∫
        // –£–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        // customer_name: `${customerData.firstName} ${customerData.lastName}`,
        // customer_phone: customerData.phone,
        // customer_email: customerData.email
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
      if (paymentParams.sum < 100 || paymentParams.sum > 100000000) {
        throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—É–º–º–∞: ${paymentParams.sum} –∫–æ–ø–µ–µ–∫ (${amount} —Ä—É–±.)`)
      }

      console.log("üí≥ Payment parameters:", {
        sum_kopecks: paymentParams.sum,
        sum_rubles: (paymentParams.sum / 100).toFixed(2),
        payment_purpose: paymentParams.payment_purpose,
        merchant_order_id: paymentParams.merchant_order_id
      })

      try {
        // –í—ã–∑—ã–≤–∞–µ–º API QR Manager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR –∫–æ–¥–∞
        const response = await fetch(`${qrManagerApiUrl}/operations/qr-code/`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Api-Key': qrManagerApiKey,
            'Accept': 'application/json'
          },
          body: JSON.stringify(paymentParams)
        })

        const responseText = await response.text()
        console.log("üìä –û—Ç–≤–µ—Ç QR Manager API:", {
          status: response.status,
          statusText: response.statusText,
          response: responseText
        })

        if (!response.ok) {
          throw new Error(`QR Manager API error: ${response.status} ${responseText}`)
        }

        const qrManagerResponse = JSON.parse(responseText)
        console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç QR Manager:", qrManagerResponse)

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ QR –∫–æ–¥–∞
        if (qrManagerResponse && qrManagerResponse.results) {
          const qrData = qrManagerResponse.results;
          console.log("üîç –ê–Ω–∞–ª–∏–∑ QR –∫–æ–¥–∞:", {
            qr_link: qrData.qr_link,
            qrc_id: qrData.qrc_id,
            operation_id: qrData.operation_id,
            sum_in_qr: qrData.qr_link ? qrData.qr_link.match(/sum=(\d+)/)?.[1] : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
            expected_sum: paymentParams.sum
          })
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ QR –∫–æ–¥–∞ –≤ –æ—Ç–≤–µ—Ç–µ
        if (qrManagerResponse && qrManagerResponse.results && qrManagerResponse.results.qr_img) {
          const operationId = qrManagerResponse.results.operation_id || qrManagerResponse.results.payment_id || orderId;
          
          console.log("‚úÖ QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", {
            operation_id: operationId,
            amount_rubles: (paymentParams.sum / 100).toFixed(2),
            amount_kopecks: paymentParams.sum,
            qr_img: qrManagerResponse.results.qr_img.substring(0, 50) + '...'
          })
          
          return new Response(
            JSON.stringify({
              success: true,
              qr_img: qrManagerResponse.results.qr_img,
              payment_id: operationId,
              operation_id: qrManagerResponse.results.operation_id,
              qr_data: qrManagerResponse.results.qr_data,
              qr_link: qrManagerResponse.results.qr_link,
              amount: amount,
              amount_kopecks: paymentParams.sum,
              orderId: orderId,
              payment_purpose: paymentParams.payment_purpose
            }),
            { 
              headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
            }
          )
        } else {
          throw new Error('QR –∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç API')
        }

      } catch (apiError: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ API QR Manager:", apiError)
        
        return new Response(
          JSON.stringify({
            success: false,
            error: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR –∫–æ–¥–∞: ${apiError.message}`
          }),
          { 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 500
          }
        )
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    if (requestData.action === 'status') {
      const { paymentId } = requestData
      
      if (!paymentId) {
        return new Response(
          JSON.stringify({ 
            success: false, 
            error: 'Missing paymentId for status check' 
          }),
          { 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 400
          }
        )
      }

      console.log(`üîç Checking payment status for ID: ${paymentId}`)

      try {
        // –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ QR Manager API
        const statusResponse = await fetch(`${qrManagerApiUrl}/operations/payment-status/${paymentId}/`, {
          method: 'GET',
          headers: {
            'X-Api-Key': qrManagerApiKey,
            'Accept': 'application/json'
          }
        })

        const statusData = await statusResponse.text()
        console.log(`üìä Status API response:`, {
          status: statusResponse.status,
          data: statusData
        })

        if (statusResponse.ok) {
          const statusResult = JSON.parse(statusData)
          return new Response(
            JSON.stringify({
              success: true,
              paymentId,
              status: statusResult.status || 'unknown',
              data: statusResult
            }),
            { 
              headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
            }
          )
        } else {
          console.log(`‚ö†Ô∏è Status check failed: ${statusResponse.status}`)
          return new Response(
            JSON.stringify({
              success: false,
              error: 'Status check failed',
              paymentId,
              status: 'unknown'
            }),
            { 
              headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
            }
          )
        }
      } catch (statusError: any) {
        console.error(`‚ùå Status check error:`, statusError)
        return new Response(
          JSON.stringify({
            success: false,
            error: `Status check error: ${statusError.message}`,
            paymentId,
            status: 'error'
          }),
          { 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        )
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (requestData.action === 'test') {
      console.log(`üß™ Test request received`)
      return new Response(
        JSON.stringify({
          success: true,
          message: 'QR Manager payment service is working',
          timestamp: new Date().toISOString(),
          config: {
            hasApiKey: !!qrManagerApiKey,
            hasMerchantId: !!qrManagerMerchantId,
            apiUrl: qrManagerApiUrl
          }
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    return new Response(
      JSON.stringify({ 
        success: false, 
        error: 'Unknown action' 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400
      }
    )

  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ QR Manager Payment Function:", error)
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message || 'Internal server error' 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500
      }
    )
  }
})