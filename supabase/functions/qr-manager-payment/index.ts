import { serve } from "https://deno.land/std@0.190.0/http/server.ts"
import { corsHeaders } from '../_shared/cors.ts'

console.log("üöÄ QR Manager Payment Function Started")

interface CustomerData {
  firstName: string;
  lastName: string;
  phone: string;
  email: string;
  comment?: string;
}

interface PaymentRequest {
  action: string;
  amount?: number;
  orderId?: string;
  customerData?: CustomerData;
  paymentId?: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  // Handle GET requests for health check
  if (req.method === 'GET') {
    return new Response(
      JSON.stringify({ status: 'QR Manager Payment Service is running' }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }

  try {
    const requestData: PaymentRequest = await req.json()
    console.log("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å QR Manager:", JSON.stringify(requestData, null, 2))

    // –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ QR Manager –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const qrManagerApiKey = Deno.env.get('QR_MANAGER_API_KEY')
    const qrManagerMerchantId = Deno.env.get('QR_MANAGER_MERCHANT_ID')
    const qrManagerApiUrl = Deno.env.get('QR_MANAGER_API_URL') || 'https://app.wapiserv.qrm.ooo'

    if (!qrManagerApiKey || !qrManagerMerchantId) {
      console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ QR Manager")
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'QR Manager credentials not configured',
          details: {
            hasApiKey: !!qrManagerApiKey,
            hasMerchantId: !!qrManagerMerchantId
          }
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 400
        }
      )
    }

    if (requestData.action === 'init') {
      const { amount, orderId, customerData } = requestData

      if (!amount || !orderId || !customerData) {
        return new Response(
          JSON.stringify({ 
            success: false, 
            error: 'Missing required fields: amount, orderId, customerData' 
          }),
          { 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 400
          }
        )
      }

      console.log("üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ QR Manager:", {
        amount,
        orderId,
        customer: `${customerData.firstName} ${customerData.lastName}`
      })

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è QR Manager API —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –°–ë–ü
      const sumKopecks = amount * 100;
      
      // –°–æ–∑–¥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –°–ë–ü –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
      // –°–ë–ü —Ç—Ä–µ–±—É–µ—Ç: –∫–æ—Ä–æ—Ç–∫–∏–µ ID, —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
      const timestamp = Date.now().toString().slice(-12); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 12 —Ü–∏—Ñ—Ä timestamp
      const shortOrderId = timestamp; // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ID
      
      // Webhook URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
      const webhookUrl = `https://mcszrtlpbsesanylyzmi.supabase.co/functions/v1/qr-manager-webhook`;
      
      const paymentParams = {
        sum: sumKopecks, // –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
        qr_size: 400, // –†–∞–∑–º–µ—Ä QR –∫–æ–¥–∞
        // –ö–†–ò–¢–ò–ß–ù–û: —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –°–ë–ü —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        payment_purpose: `Payment ${shortOrderId}`,
        // merchant_order_id - –∫–æ—Ä–æ—Ç–∫–∏–π, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        merchant_order_id: shortOrderId,
        // –î–æ–±–∞–≤–ª—è–µ–º webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_url: webhookUrl,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        qr_type: 'dynamic', // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π QR –∫–æ–¥
        currency: 'RUB' // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –¥–ª—è –°–ë–ü (–º–∏–Ω–∏–º—É–º 1 —Ä—É–±–ª—å, –º–∞–∫—Å–∏–º—É–º 1 –º–ª–Ω —Ä—É–±–ª–µ–π)
      if (sumKopecks < 100 || sumKopecks > 100000000) {
        throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—É–º–º–∞ –¥–ª—è –°–ë–ü: ${sumKopecks} –∫–æ–ø–µ–µ–∫ (${amount} —Ä—É–±.). –ú–∏–Ω–∏–º—É–º: 1 —Ä—É–±, –ú–∞–∫—Å–∏–º—É–º: 1,000,000 —Ä—É–±`)
      }

      console.log("üí≥ Payment parameters:", {
        sum_kopecks: sumKopecks,
        sum_rubles: (sumKopecks / 100).toFixed(2),
        payment_purpose: paymentParams.payment_purpose,
        merchant_order_id: paymentParams.merchant_order_id,
        qr_size: paymentParams.qr_size,
        original_order_id: orderId,
        note: "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –°–ë–ü —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"
      })

      console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', {
        hasApiKey: !!qrManagerApiKey,
        hasMerchantId: !!qrManagerMerchantId,
        apiUrl: qrManagerApiUrl,
        apiKeyLength: qrManagerApiKey?.length,
        webhookUrl: paymentParams.notification_url
      })

      const qrManagerUrl = `${qrManagerApiUrl}/api/v1/payment/qr/create/`
      const requestBody = {
        ...paymentParams,
        merchant_id: qrManagerMerchantId
      }

      console.log('üåê QR Manager API request:', {
        url: qrManagerUrl,
        method: 'POST',
        body: JSON.stringify(requestBody, null, 2),
        headers: { 'Authorization': `Token ${qrManagerApiKey?.substring(0, 10)}...` }
      })

      try {
        const qrManagerResponse = await fetch(qrManagerUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Token ${qrManagerApiKey}`,
            'Accept': 'application/json'
          },
          body: JSON.stringify(requestBody)
        })

        const responseText = await qrManagerResponse.text()
        console.log("üìä –û—Ç–≤–µ—Ç QR Manager API:", {
          status: qrManagerResponse.status,
          statusText: qrManagerResponse.statusText,
          response: responseText
        })

        if (!qrManagerResponse.ok) {
          const errorText = responseText
          console.error('‚ùå QR Manager API error:', {
            status: qrManagerResponse.status,
            statusText: qrManagerResponse.statusText,
            error: errorText,
            request_body: requestBody,
            possible_causes: [
              '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∏–ª–∏ merchant_id',
              '–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º —Å—É–º–º—ã',
              '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã payment_purpose –∏–ª–∏ merchant_order_id',
              '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –°–ë–ü –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'
            ]
          })
          throw new Error(`QR Manager API error: ${qrManagerResponse.status} - ${errorText}`)
        }

        const qrManagerResponseData = JSON.parse(responseText)
        console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç QR Manager:", qrManagerResponseData)

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ QR –∫–æ–¥–∞
        if (qrManagerResponseData && qrManagerResponseData.results) {
          const qrData = qrManagerResponseData.results;
          const sumFromQr = qrData.qr_link ? qrData.qr_link.match(/sum=(\d+)/)?.[1] : null;
          console.log("üîç –ê–Ω–∞–ª–∏–∑ QR –∫–æ–¥–∞:", {
            qr_link: qrData.qr_link,
            qrc_id: qrData.qrc_id,
            operation_id: qrData.operation_id,
            sum_in_qr: sumFromQr,
            expected_sum: sumKopecks,
            sum_match: sumFromQr === sumKopecks.toString(),
            payment_purpose_used: paymentParams.payment_purpose,
            merchant_order_id_used: paymentParams.merchant_order_id,
            optimization: "–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∞—Ç–∏–Ω–∏—Ü—É –¥–ª—è –°–ë–ü —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"
          });
          
          if (sumFromQr && sumFromQr !== sumKopecks.toString()) {
            console.error(`‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã –≤ QR –∫–æ–¥–µ! –û–∂–∏–¥–∞–µ—Ç—Å—è: ${sumKopecks}, –í QR: ${sumFromQr}`);
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ QR –∫–æ–¥–∞ –≤ –æ—Ç–≤–µ—Ç–µ
        if (qrManagerResponseData && qrManagerResponseData.results && qrManagerResponseData.results.qr_img) {
          const operationId = qrManagerResponseData.results.operation_id || qrManagerResponseData.results.payment_id || orderId;
          
          console.log('‚úÖ QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', {
            operation_id: operationId,
            amount_rubles: (sumKopecks / 100).toFixed(2),
            amount_kopecks: sumKopecks,
            qr_img: qrManagerResponseData.results.qr_img.substring(0, 50) + '...',
            webhook_url: paymentParams.notification_url,
            final_payment_purpose: paymentParams.payment_purpose,
            final_merchant_order_id: paymentParams.merchant_order_id,
            sbp_optimizations: [
              "–õ–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ payment_purpose",
              "–ö–æ—Ä–æ—Ç–∫–∏–π merchant_order_id",
              "Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
              "–Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã",
              "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π QR –∫–æ–¥"
            ]
          })
          
          return new Response(
            JSON.stringify({
              success: true,
              qr_img: qrManagerResponseData.results.qr_img,
              operation_id: operationId,
              qrc_id: qrManagerResponseData.results.qrc_id,
              amount: amount,
              merchant_order_id: paymentParams.merchant_order_id,
              original_order_id: orderId,
              webhook_url: paymentParams.notification_url,
              payment_instructions: {
                ru: "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü",
                en: "Scan QR code in your bank app to pay via SBP"
              },
              sbp_compatible: true
            }),
            {
              status: 200,
              headers: { ...corsHeaders, 'Content-Type': 'application/json' }
            }
          )
        } else {
          throw new Error('QR –∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç API')
        }

      } catch (apiError: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ API QR Manager:", apiError)
        
        return new Response(
          JSON.stringify({
            success: false,
            error: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR –∫–æ–¥–∞: ${apiError.message}`
          }),
          { 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 500
          }
        )
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    if (requestData.action === 'status') {
      const { paymentId } = requestData
      
      if (!paymentId) {
        return new Response(
          JSON.stringify({ 
            success: false, 
            error: 'Missing paymentId for status check' 
          }),
          { 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 400
          }
        )
      }

      console.log(`üîç Checking payment status for ID: ${paymentId}`)

      try {
        // –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ QR Manager API
        const statusResponse = await fetch(`${qrManagerApiUrl}/operations/payment-status/${paymentId}/`, {
          method: 'GET',
          headers: {
            'X-Api-Key': qrManagerApiKey,
            'Accept': 'application/json'
          }
        })

        const statusData = await statusResponse.text()
        console.log(`üìä Status API response:`, {
          status: statusResponse.status,
          data: statusData
        })

        if (statusResponse.ok) {
          const statusResult = JSON.parse(statusData)
          return new Response(
            JSON.stringify({
              success: true,
              paymentId,
              status: statusResult.status || 'unknown',
              data: statusResult
            }),
            { 
              headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
            }
          )
        } else {
          console.log(`‚ö†Ô∏è Status check failed: ${statusResponse.status}`)
          return new Response(
            JSON.stringify({
              success: false,
              error: 'Status check failed',
              paymentId,
              status: 'unknown'
            }),
            { 
              headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
            }
          )
        }
      } catch (statusError: any) {
        console.error(`‚ùå Status check error:`, statusError)
        return new Response(
          JSON.stringify({
            success: false,
            error: `Status check error: ${statusError.message}`,
            paymentId,
            status: 'error'
          }),
          { 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        )
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (requestData.action === 'test') {
      console.log(`üß™ Test request received`)
      return new Response(
        JSON.stringify({
          success: true,
          message: 'QR Manager payment service is working',
          timestamp: new Date().toISOString(),
          config: {
            hasApiKey: !!qrManagerApiKey,
            hasMerchantId: !!qrManagerMerchantId,
            apiUrl: qrManagerApiUrl
          }
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    return new Response(
      JSON.stringify({ 
        success: false, 
        error: 'Unknown action' 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400
      }
    )

  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ QR Manager Payment Function:", error)
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message || 'Internal server error' 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500
      }
    )
  }
})