import { serve } from "https://deno.land/std@0.190.0/http/server.ts"
import { corsHeaders } from '../_shared/cors.ts'

console.log("üöÄ QR Manager Webhook Function Started")

serve(async (req) => {
  console.log("üìã", req.method, req.url)
  
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  // Log request headers
  console.log("üì® Request headers:")
  for (const [key, value] of req.headers.entries()) {
    console.log(`  ${key}: ${value}`)
  }

  try {
    const bodyText = await req.text()
    console.log("üìè Body length:", bodyText.length)
    console.log("üì• Raw request body:", bodyText.substring(0, 500) + (bodyText.length > 500 ? "..." : ""))

    let webhookData: any = {}
    
    try {
      webhookData = JSON.parse(bodyText)
      console.log("üìä Parsed webhook data:", JSON.stringify(webhookData, null, 2))
    } catch (parseError) {
      console.log("‚ö†Ô∏è Failed to parse as JSON, treating as form data or other format")
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ URL-encoded –¥–∞–Ω–Ω—ã–µ
      if (bodyText.includes('=') && bodyText.includes('&')) {
        const params = new URLSearchParams(bodyText)
        for (const [key, value] of params.entries()) {
          webhookData[key] = value
        }
        console.log("üìä Parsed as URL-encoded:", webhookData)
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ QR Manager
    const qrManagerData = {
      payment_id: webhookData.payment_id || webhookData.paymentId || webhookData.id,
      order_id: webhookData.order_id || webhookData.orderId,
      status: webhookData.status || webhookData.payment_status,
      amount: webhookData.amount,
      currency: webhookData.currency || 'RUB',
      merchant_id: webhookData.merchant_id || "not provided"
    }

    console.log("üìä QR Manager webhook data:", JSON.stringify(qrManagerData, null, 2))

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const requiredParams = ["payment_id", "status", "amount"]
    const missingParams = requiredParams.filter(param => !qrManagerData[param as keyof typeof qrManagerData])

    if (missingParams.length > 0) {
      console.log("‚ö†Ô∏è Missing QR Manager parameters:", missingParams)
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è webhook, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
      return new Response(
        JSON.stringify({ 
          status: "received", 
          message: "Webhook received but missing parameters",
          missing: missingParams 
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–∞
    console.log(`üí≥ QR Manager Payment Status: ${qrManagerData.status}`)

    switch (qrManagerData.status?.toLowerCase()) {
      case 'success':
      case 'paid':
      case 'completed':
        console.log("‚úÖ Payment successful")
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        break
        
      case 'failed':
      case 'error':
      case 'cancelled':
        console.log("‚ùå Payment failed")
        break
        
      case 'pending':
      case 'processing':
        console.log("‚è≥ Payment pending")
        break
        
      default:
        console.log("‚ùì Unknown payment status:", qrManagerData.status)
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return new Response(
      JSON.stringify({ 
        status: "ok", 
        message: "Webhook processed successfully" 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error: any) {
    console.error("‚ùå Error in QR Manager webhook:", error)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã QR Manager –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
    return new Response(
      JSON.stringify({ 
        status: "error", 
        message: error.message 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})