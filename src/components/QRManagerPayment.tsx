import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { QrCode, Loader2 } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";

interface QRManagerPaymentProps {
  amount: number;
  orderId: string;
  customerData: {
    firstName: string;
    lastName: string;
    phone: string;
    email: string;
    comment?: string;
  };
  onSuccess: () => void;
  onError: (error: string) => void;
}

const QRManagerPayment = ({
  amount,
  orderId,
  customerData,
  onSuccess,
  onError
}: QRManagerPaymentProps) => {
  const [loading, setLoading] = useState(false);
  const [qrImage, setQrImage] = useState<string | null>(null);
  const [showQRDialog, setShowQRDialog] = useState(false);

  const initPayment = async () => {
    try {
      setLoading(true);
      console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ QR Manager:", {
        amount,
        orderId,
        customerData
      });

      const { data, error } = await supabase.functions.invoke('qr-manager-payment', {
        body: {
          action: 'init',
          amount,
          orderId,
          customerData
        }
      });

      if (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ QR Manager:", error);
        onError(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞");
        return;
      }

      console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç QR Manager:", data);

      if (data.success && data.qr_img) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –∫–æ–¥ –≤ –¥–∏–∞–ª–æ–≥–µ
        setQrImage(data.qr_img);
        setShowQRDialog(true);
        
        toast.success("QR –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω");
      } else {
        console.error("‚ùå –ù–µ—É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç QR Manager:", data);
        onError(data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂");
      }
    } catch (error: any) {
      console.error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ QR Manager:", error);
      onError(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É");
    } finally {
      setLoading(false);
    }
  };

  const handleQRDialogClose = () => {
    setShowQRDialog(false);
    setQrImage(null);
  };

  return (
    <>
      <Button
        onClick={initPayment}
        disabled={loading}
        className="w-full"
        variant="outline"
      >
        {loading ? (
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
        ) : (
          <QrCode className="mr-2 h-4 w-4" />
        )}
        {loading ? "–°–æ–∑–¥–∞–Ω–∏–µ QR –∫–æ–¥–∞..." : "–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –°–ë–ü"}
      </Button>

      <Dialog open={showQRDialog} onOpenChange={handleQRDialogClose}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü</DialogTitle>
          </DialogHeader>
          <div className="flex flex-col items-center space-y-4 p-4">
            {qrImage && (
              <div className="bg-white p-4 rounded-lg border">
                <img 
                  src={qrImage} 
                  alt="QR –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã" 
                  className="w-64 h-64 object-contain"
                />
              </div>
            )}
            <div className="text-center space-y-2">
              <p className="font-semibold">–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ</p>
              <p className="text-sm text-muted-foreground">
                –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü
              </p>
              <p className="text-xs text-muted-foreground">
                –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è
              </p>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default QRManagerPayment;