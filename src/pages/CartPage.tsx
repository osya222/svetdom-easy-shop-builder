
import { useState } from "react";
import { useCart } from "@/context/CartContext";
import { useToast } from "@/hooks/use-toast";
import { Link } from "react-router-dom";
import { ArrowLeft } from "lucide-react";
import Footer from "@/components/Footer";
import CartItems from "@/components/cart/CartItems";
import CustomerForm, { CustomerData } from "@/components/cart/CustomerForm";
import CartSummary from "@/components/cart/CartSummary";
import PaymentDialog from "@/components/cart/PaymentDialog";
import EmptyCart from "@/components/cart/EmptyCart";

const CartPage = () => {
  const { 
    items, 
    updateQuantity, 
    removeItem, 
    clearCart, 
    totalPrice, 
    totalItems
  } = useCart();
  const { toast } = useToast();
  
  const [showPayment, setShowPayment] = useState(false);
  const [orderSent, setOrderSent] = useState(false);
  const [acceptTerms, setAcceptTerms] = useState(false);
  const [customerData, setCustomerData] = useState<CustomerData>({
    firstName: '',
    lastName: '',
    phone: '',
    email: '',
    comment: ''
  });

  const handleCustomerChange = (field: string, value: string) => {
    setCustomerData(prev => ({ ...prev, [field]: value }));
  };

  const isFormValid = customerData.firstName && customerData.lastName && customerData.phone && customerData.email;

  const handlePaymentSuccess = () => {
    console.log("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
    
    setShowPayment(false);
    setOrderSent(false);
    clearCart();
    setCustomerData({
      firstName: '',
      lastName: '',
      phone: '',
      email: '',
      comment: ''
    });
    setAcceptTerms(false);
    
    toast({
      title: "–°–ø–∞—Å–∏–±–æ! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ",
      description: "–í–∞—à –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
    });
  };

  const handlePaymentError = (error: string) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ:", error);
    
    toast({
      title: "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã",
      description: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂: ${error}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.`,
      variant: "destructive",
    });
  };

  const handleAcceptTermsChange = (checked: boolean | string) => {
    // Convert to boolean: true if checked is true or "true", false otherwise
    const booleanValue = checked === true || checked === "true";
    setAcceptTerms(booleanValue);
  };

  const handleOrderSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    console.log("=== –ù–ê–ß–ê–õ–û –û–¢–ü–†–ê–í–ö–ò –ó–ê–ö–ê–ó–ê ===");
    console.log("–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:", customerData);
    console.log("–¢–æ–≤–∞—Ä—ã:", items);
    console.log("–û–±—â–∞—è —Å—É–º–º–∞:", totalPrice);
    
    setOrderSent(true);
    
    try {
      const orderId = `ORDER_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      console.log("ID –∑–∞–∫–∞–∑–∞:", orderId);
      
      const itemsList = items.map((item, index) => 
        `${index + 1}. ${item.product.name} - ${item.quantity} —à—Ç. √ó ${item.product.price} ‚ÇΩ = ${item.product.price * item.quantity} ‚ÇΩ`
      ).join('\n');
      
      console.log("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", itemsList);
      
      const orderMessage = `
–ù–û–í–´–ô –ó–ê–ö–ê–ó ${orderId}

–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

–ö–õ–ò–ï–ù–¢:
–ò–º—è: ${customerData.firstName} ${customerData.lastName}
–¢–µ–ª–µ—Ñ–æ–Ω: ${customerData.phone}
Email: ${customerData.email}
${customerData.comment ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${customerData.comment}` : ''}

–ó–ê–ö–ê–ó:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalItems} —à—Ç.
–û–±—â–∞—è —Å—É–º–º–∞: ${totalPrice} ‚ÇΩ
–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)
–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: ${totalPrice >= 2000 ? '–î–∞' : '–ù–µ—Ç'}

–¢–û–í–ê–†–´:
${itemsList}

–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Å–∞–π—Ç–∞ –°–≤–µ—Ç–î–æ–º
      `.trim();
      
      console.log("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Web3Forms...");
      console.log("Access Key:", 'bf3362d5-6685-4f10-b7e7-7ee842098073');
      console.log("–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", orderMessage);
      
      const formData = new FormData();
      formData.append('access_key', 'bf3362d5-6685-4f10-b7e7-7ee842098073');
      formData.append('name', `${customerData.firstName} ${customerData.lastName}`);
      formData.append('email', customerData.email);
      formData.append('phone', customerData.phone);
      formData.append('subject', `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ${orderId} —Å —Å–∞–π—Ç–∞ –°–≤–µ—Ç–î–æ–º`);
      formData.append('message', orderMessage);
      formData.append('from_name', '–°–≤–µ—Ç–î–æ–º - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω');
      formData.append('to_name', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–≤–µ—Ç–î–æ–º');
      formData.append('replyto', customerData.email);
      formData.append('cc', 'pavel220585gpt@gmail.com');
      
      console.log("FormData –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...");
      
      const response = await fetch('https://api.web3forms.com/submit', {
        method: 'POST',
        body: formData
      });
      
      console.log("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status);
      console.log("Headers –æ—Ç–≤–µ—Ç–∞:", Object.fromEntries(response.headers.entries()));
      
      const result = await response.json();
      console.log("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Web3Forms:", result);
      
      if (response.ok && result.success) {
        console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Web3Forms!");
        console.log("ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Web3Forms:", result.message_id || '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
        
        setOrderSent(false);
        
        toast({
          title: "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç",
          description: `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderId}. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ...`,
        });
        
        (window as any).currentOrderId = orderId;
        
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ Web3Forms:", result);
        throw new Error(result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Web3Forms');
      }
      
    } catch (error) {
      console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞:", error);
      
      setOrderSent(false);
      
      const orderId = `ORDER_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      toast({
        title: "–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–∫–∞–∑–∞",
        description: `–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ: +7 903 003-31-48 –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: pavel220585gpt@gmail.com. –ó–∞–∫–∞–∑: ${orderId}`,
        variant: "destructive",
      });
    }
    
    console.log("=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ö–ê–ó–ê ===");
  };

  if (items.length === 0) {
    return <EmptyCart />;
  }

  return (
    <>
      <div className="min-h-screen bg-background">
        <div className="container mx-auto px-4 py-8">
          <div className="mb-6">
            <Link to="/" className="inline-flex items-center text-primary hover:text-primary/80">
              <ArrowLeft className="h-4 w-4 mr-2" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥
            </Link>
          </div>

          <div className="max-w-6xl mx-auto">
            <h1 className="text-3xl font-bold mb-8">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <div className="space-y-6">
                <CartItems
                  items={items}
                  totalItems={totalItems}
                  onUpdateQuantity={updateQuantity}
                  onRemoveItem={removeItem}
                />
                
                <CustomerForm
                  customerData={customerData}
                  onCustomerChange={handleCustomerChange}
                />
              </div>

              <div>
                <CartSummary
                  items={items}
                  totalPrice={totalPrice}
                  isFormValid={isFormValid}
                  onShowPayment={() => setShowPayment(true)}
                  onClearCart={clearCart}
                />
              </div>
            </div>
          </div>
        </div>
        <Footer />
      </div>

      <PaymentDialog
        isOpen={showPayment}
        onOpenChange={setShowPayment}
        orderSent={orderSent}
        customerData={customerData}
        totalPrice={totalPrice}
        acceptTerms={acceptTerms}
        onAcceptTermsChange={handleAcceptTermsChange}
        onOrderSubmit={handleOrderSubmit}
        onPaymentSuccess={handlePaymentSuccess}
        onPaymentError={handlePaymentError}
      />
    </>
  );
};

export default CartPage;
