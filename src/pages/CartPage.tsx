import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Textarea } from "@/components/ui/textarea";

import { useCart } from "@/context/CartContext";
import { Minus, Plus, Trash2, ShoppingCart, QrCode, ArrowLeft } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { Link } from "react-router-dom";
import Footer from "@/components/Footer";

const CartPage = () => {
  const { 
    items, 
    updateQuantity, 
    removeItem, 
    clearCart, 
    totalPrice, 
    totalItems
  } = useCart();
  const { toast } = useToast();
  
  const [showPayment, setShowPayment] = useState(false);
  const [orderSent, setOrderSent] = useState(false);
  
  const [acceptTerms, setAcceptTerms] = useState(false);
  const [customerData, setCustomerData] = useState({
    firstName: '',
    lastName: '',
    phone: '',
    email: '',
    comment: ''
  });

  const handleCustomerChange = (field: string, value: string) => {
    setCustomerData(prev => ({ ...prev, [field]: value }));
  };

  const isFormValid = customerData.firstName && customerData.lastName && customerData.phone && customerData.email;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ FormSubmit –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
  const sendViaFormSubmit = async (orderMessage: string, orderId: string) => {
    console.log("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ FormSubmit (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)...");
    
    const formData = new FormData();
    formData.append('name', `${customerData.firstName} ${customerData.lastName}`);
    formData.append('email', customerData.email);
    formData.append('phone', customerData.phone);
    formData.append('message', orderMessage);
    formData.append('_subject', `–ó–∞–∫–∞–∑ ${orderId} - –°–≤–µ—Ç–î–æ–º`);
    formData.append('_template', 'table');
    formData.append('_captcha', 'false');
    
    const response = await fetch('https://formsubmit.co/pavel220585gpt@gmail.com', {
      method: 'POST',
      body: formData
    });
    
    return response;
  };

  const handleOrderSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    console.log("=== –ù–ê–ß–ê–õ–û –û–¢–ü–†–ê–í–ö–ò –ó–ê–ö–ê–ó–ê ===");
    console.log("–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:", customerData);
    console.log("–¢–æ–≤–∞—Ä—ã:", items);
    console.log("–û–±—â–∞—è —Å—É–º–º–∞:", totalPrice);
    
    setOrderSent(true);
    
    try {
      // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
      const orderId = `ORDER_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      console.log("ID –∑–∞–∫–∞–∑–∞:", orderId);
      
      // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      const itemsList = items.map((item, index) => 
        `${index + 1}. ${item.product.name} - ${item.quantity} —à—Ç. √ó ${item.product.price} ‚ÇΩ = ${item.product.price * item.quantity} ‚ÇΩ`
      ).join('\n');
      
      console.log("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", itemsList);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const orderMessage = `
–ù–û–í–´–ô –ó–ê–ö–ê–ó ${orderId}

–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

–ö–õ–ò–ï–ù–¢:
–ò–º—è: ${customerData.firstName} ${customerData.lastName}
–¢–µ–ª–µ—Ñ–æ–Ω: ${customerData.phone}
Email: ${customerData.email}
${customerData.comment ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${customerData.comment}` : ''}

–ó–ê–ö–ê–ó:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalItems} —à—Ç.
–û–±—â–∞—è —Å—É–º–º–∞: ${totalPrice} ‚ÇΩ
–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –û–Ω–ª–∞–π–Ω –ø–æ –°–ë–ü
–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: ${totalPrice >= 2000 ? '–î–∞' : '–ù–µ—Ç'}

–¢–û–í–ê–†–´:
${itemsList}
      `.trim();
      
      console.log("–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", orderMessage);
      
      let success = false;
      let errorMessage = '';

      // –ü–æ–ø—ã—Ç–∫–∞ 1: Web3Forms
      console.log("üöÄ –ü–æ–ø—ã—Ç–∫–∞ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Web3Forms...");
      try {
        const formData = new FormData();
        formData.append('access_key', 'bf3362d5-6685-4f10-b7e7-7ee842098073');
        formData.append('name', `${customerData.firstName} ${customerData.lastName}`);
        formData.append('email', customerData.email);
        formData.append('subject', `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ${orderId} —Å —Å–∞–π—Ç–∞ –°–≤–µ—Ç–î–æ–º`);
        formData.append('message', orderMessage);
        formData.append('redirect', 'https://svetdom.online/thanks.html');
        
        const response = await fetch('https://api.web3forms.com/submit', {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        console.log("–û—Ç–≤–µ—Ç Web3Forms:", result);
        
        if (response.ok && result.success) {
          console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Web3Forms!");
          success = true;
        } else {
          throw new Error(result.message || '–û—à–∏–±–∫–∞ Web3Forms');
        }
      } catch (web3Error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ Web3Forms:", web3Error);
        errorMessage += `Web3Forms: ${web3Error.message}; `;

        // –ü–æ–ø—ã—Ç–∫–∞ 2: FormSubmit (—Ä–µ–∑–µ—Ä–≤)
        console.log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ FormSubmit...");
        try {
          const formSubmitResponse = await sendViaFormSubmit(orderMessage, orderId);
          
          if (formSubmitResponse.ok) {
            console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ FormSubmit!");
            success = true;
          } else {
            throw new Error(`FormSubmit HTTP ${formSubmitResponse.status}`);
          }
        } catch (formSubmitError) {
          console.error("‚ùå –û—à–∏–±–∫–∞ FormSubmit:", formSubmitError);
          errorMessage += `FormSubmit: ${formSubmitError.message}; `;

          // –ü–æ–ø—ã—Ç–∫–∞ 3: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ EmailJS (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤)
          console.log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Netlify Forms...");
          try {
            const netlifyFormData = new FormData();
            netlifyFormData.append('form-name', 'order');
            netlifyFormData.append('name', `${customerData.firstName} ${customerData.lastName}`);
            netlifyFormData.append('email', customerData.email);
            netlifyFormData.append('phone', customerData.phone);
            netlifyFormData.append('order-details', orderMessage);

            const netlifyResponse = await fetch('/', {
              method: 'POST',
              headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
              body: new URLSearchParams(netlifyFormData).toString()
            });

            if (netlifyResponse.ok) {
              console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Netlify Forms!");
              success = true;
            } else {
              throw new Error(`Netlify Forms HTTP ${netlifyResponse.status}`);
            }
          } catch (netlifyError) {
            console.error("‚ùå –û—à–∏–±–∫–∞ Netlify Forms:", netlifyError);
            errorMessage += `Netlify: ${netlifyError.message}`;
          }
        }
      }

      if (success) {
        console.log("‚úÖ –ó–ê–ö–ê–ó –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù!");
        
        setTimeout(() => {
          setShowPayment(false);
          setOrderSent(false);
          clearCart();
          setCustomerData({
            firstName: '',
            lastName: '',
            phone: '',
            email: '',
            comment: ''
          });
          setAcceptTerms(false);
          toast({
            title: "–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç",
            description: `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderId}. –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.`,
          });
        }, 2000);
      } else {
        throw new Error(`–í—Å–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏: ${errorMessage}`);
      }
      
    } catch (error) {
      console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞:", error);
      
      setOrderSent(false);
      
      const orderId = `ORDER_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      toast({
        title: "–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–∫–∞–∑–∞",
        description: `–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ: +7 903 003-31-48 –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: pavel220585gpt@gmail.com. –ó–∞–∫–∞–∑: ${orderId}`,
        variant: "destructive",
      });
    }
    
    console.log("=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ö–ê–ó–ê ===");
  };

  if (items.length === 0) {
    return (
      <div className="min-h-screen bg-background">
        <div className="container mx-auto px-4 py-8">
          <div className="mb-6">
            <Link to="/" className="inline-flex items-center text-primary hover:text-primary/80">
              <ArrowLeft className="h-4 w-4 mr-2" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥
            </Link>
          </div>
          
          <Card className="max-w-md mx-auto">
            <CardContent className="p-8 text-center">
              <ShoppingCart className="h-16 w-16 mx-auto mb-4 text-muted-foreground" />
              <h2 className="text-xl font-semibold mb-2">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
              <p className="text-muted-foreground mb-6">
                –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
              </p>
              <Button asChild className="bg-yellow-500 hover:bg-yellow-600 text-white">
                <Link to="/">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥</Link>
              </Button>
            </CardContent>
          </Card>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <>
      <div className="min-h-screen bg-background">
        <div className="container mx-auto px-4 py-8">
          <div className="mb-6">
            <Link to="/" className="inline-flex items-center text-primary hover:text-primary/80">
              <ArrowLeft className="h-4 w-4 mr-2" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥
            </Link>
          </div>

          <div className="max-w-6xl mx-auto">
            <h1 className="text-3xl font-bold mb-8">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –¢–æ–≤–∞—Ä—ã –∏ —Ñ–æ—Ä–º–∞ –∫–ª–∏–µ–Ω—Ç–∞ */}
              <div className="space-y-6">
                {/* –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ */}
                <Card>
                  <CardHeader>
                    <CardTitle>–í–∞—à –∑–∞–∫–∞–∑ ({totalItems} —Ç–æ–≤–∞—Ä–∞)</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {items.map((item) => (
                        <div key={item.product.id} className="flex items-center gap-4 p-3 bg-secondary/10 rounded-lg">
                          <img 
                            src={item.product.image} 
                            alt={item.product.name}
                            className="w-16 h-16 object-cover rounded"
                          />
                          <div className="flex-1 min-w-0">
                            <h3 className="font-medium text-sm line-clamp-2">{item.product.name}</h3>
                            <p className="text-xs text-muted-foreground">{item.product.power}, {item.product.lightColor}</p>
                            <p className="text-sm font-medium mt-1">
                              {item.quantity} √ó {item.product.price} ‚ÇΩ = {item.product.price * item.quantity} ‚ÇΩ
                            </p>
                          </div>
                          <div className="flex items-center gap-1">
                            <Button 
                              size="sm" 
                              variant="outline"
                              onClick={() => updateQuantity(item.product.id, item.quantity - 1)}
                              className="h-6 w-6 p-0"
                            >
                              <Minus className="h-3 w-3" />
                            </Button>
                            <span className="text-sm w-6 text-center">{item.quantity}</span>
                            <Button 
                              size="sm" 
                              variant="outline"
                              onClick={() => updateQuantity(item.product.id, item.quantity + 1)}
                              className="h-6 w-6 p-0"
                            >
                              <Plus className="h-3 w-3" />
                            </Button>
                            <Button 
                              size="sm" 
                              variant="ghost"
                              onClick={() => removeItem(item.product.id)}
                              className="h-6 w-6 p-0 text-destructive hover:text-destructive ml-2"
                            >
                              <Trash2 className="h-3 w-3" />
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                {/* –§–æ—Ä–º–∞ –∫–ª–∏–µ–Ω—Ç–∞ */}
                <Card>
                  <CardHeader>
                    <CardTitle>–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="firstName">–ò–º—è *</Label>
                        <Input
                          id="firstName"
                          value={customerData.firstName}
                          onChange={(e) => handleCustomerChange('firstName', e.target.value)}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="lastName">–§–∞–º–∏–ª–∏—è *</Label>
                        <Input
                          id="lastName"
                          value={customerData.lastName}
                          onChange={(e) => handleCustomerChange('lastName', e.target.value)}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω *</Label>
                        <Input
                          id="phone"
                          type="tel"
                          value={customerData.phone}
                          onChange={(e) => handleCustomerChange('phone', e.target.value)}
                          placeholder="+7 (999) 999-99-99"
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="email">Email *</Label>
                        <Input
                          id="email"
                          type="email"
                          value={customerData.email}
                          onChange={(e) => handleCustomerChange('email', e.target.value)}
                          placeholder="email@example.com"
                          required
                        />
                      </div>
                      <div className="space-y-2 sm:col-span-2">
                        <Label htmlFor="comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</Label>
                        <Textarea
                          id="comment"
                          value={customerData.comment}
                          onChange={(e) => handleCustomerChange('comment', e.target.value)}
                          placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —É–ø–∞–∫–æ–≤–∫–µ, –¥–æ—Å—Ç–∞–≤–∫–∞, –¥—Ä—É–≥–æ–µ)"
                          className="min-h-[100px] resize-none md:resize-y"
                        />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ò—Ç–æ–≥–∏ –∑–∞–∫–∞–∑–∞ */}
              <div>
                <Card className="sticky top-4">
                  <CardHeader>
                    <CardTitle>–ò—Ç–æ–≥–∏ –∑–∞–∫–∞–∑–∞</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      {items.map((item) => (
                        <div key={item.product.id} className="flex justify-between text-sm">
                          <span className="truncate mr-2">{item.product.name} √ó {item.quantity}</span>
                          <span className="font-medium">{item.product.price * item.quantity} ‚ÇΩ</span>
                        </div>
                      ))}
                    </div>
                    
                    <Separator />
                    
                    <div className="flex justify-between items-center text-xl font-bold">
                      <span>–û–±—â–∞—è —Å—É–º–º–∞:</span>
                      <span>{totalPrice} ‚ÇΩ</span>
                    </div>

                    {totalPrice >= 2000 ? (
                      <div className="bg-green-50 border border-green-200 p-3 rounded-lg text-center">
                        <p className="text-sm font-medium text-green-800">
                          üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!
                        </p>
                      </div>
                    ) : (
                      <div className="bg-blue-50 border border-blue-200 p-3 rounded-lg text-center">
                        <p className="text-sm font-medium text-blue-800">
                          –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 2000 ‚ÇΩ
                        </p>
                        <p className="text-xs text-blue-600 mt-1">
                          –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë {2000 - totalPrice} ‚ÇΩ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
                        </p>
                      </div>
                    )}

                    <div className="space-y-3">
                      <Button 
                        className="w-full bg-yellow-500 hover:bg-yellow-600 text-white"
                        size="lg"
                        onClick={() => setShowPayment(true)}
                        disabled={!isFormValid}
                      >
                        <QrCode className="h-5 w-5 mr-2" />
                        –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ –°–ë–ü
                      </Button>
                      
                      <Button 
                        variant="outline" 
                        size="lg"
                        onClick={clearCart}
                        className="w-full"
                      >
                        <Trash2 className="h-5 w-5 mr-2" />
                        –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
                      </Button>
                    </div>

                    {!isFormValid && (
                      <p className="text-sm text-muted-foreground text-center">
                        –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
                      </p>
                    )}
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </div>
        <Footer />
      </div>

      {/* –î–∏–∞–ª–æ–≥ –æ–ø–ª–∞—Ç—ã */}
      <Dialog open={showPayment} onOpenChange={setShowPayment}>
        <DialogContent className="max-w-lg max-h-[90vh] overflow-hidden flex flex-col">
          <DialogHeader>
            <DialogTitle>–û–ø–ª–∞—Ç–∞ –ø–æ –°–ë–ü</DialogTitle>
            <DialogDescription>
              –ë—ã—Å—Ç—Ä–∞—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–∏—Å—Ç–µ–º—É –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            </DialogDescription>
          </DialogHeader>
          
          {!orderSent ? (
            <div className="flex flex-col flex-1 min-h-0">
              {/* –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
              <div className="flex-1 overflow-y-auto pr-2 space-y-6">
                {/* –†–µ–∑—é–º–µ –∑–∞–∫–∞–∑–∞ */}
                <div className="bg-secondary/20 p-4 rounded-lg space-y-2">
                  <h4 className="font-medium">–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</h4>
                  <p className="text-sm">{customerData.firstName} {customerData.lastName}</p>
                  <p className="text-sm">{customerData.phone}</p>
                  <p className="text-sm">{customerData.email}</p>
                  {customerData.comment && (
                    <p className="text-sm text-muted-foreground">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {customerData.comment}</p>
                  )}
                </div>

                {/* QR-–∫–æ–¥ –°–ë–ü */}
                <div className="text-center space-y-4">
                  <div className="bg-muted p-6 rounded-lg">
                    <img 
                      src="/images/sbp_qr_stub.png" 
                      alt="QR-–∫–æ–¥ –°–ë–ü" 
                      className="w-24 h-24 mx-auto mb-2"
                      onError={(e) => {
                        e.currentTarget.style.display = 'none';
                        const placeholder = e.currentTarget.nextElementSibling as HTMLElement;
                        if (placeholder) placeholder.style.display = 'block';
                      }}
                    />
                    <div className="hidden">
                      <QrCode className="h-24 w-24 mx-auto mb-2 text-muted-foreground" />
                    </div>
                    <p className="text-xs text-muted-foreground">QR-–∫–æ–¥ –°–ë–ü</p>
                  </div>
                  <Badge variant="secondary" className="text-xs">
                    –ö–æ–º–∏—Å—Å–∏—è 0% ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ
                  </Badge>
                  
                  <div className="text-center">
                    <p className="text-lg font-semibold">–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {totalPrice} ‚ÇΩ</p>
                    <p className="text-xs text-muted-foreground mt-1">
                      –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞
                    </p>
                  </div>
                </div>

                {/* –ß–µ–∫–±–æ–∫—Å —Å–æ–≥–ª–∞—Å–∏—è */}
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="accept-terms"
                    checked={acceptTerms}
                    onCheckedChange={(checked) => setAcceptTerms(checked as boolean)}
                  />
                  <Label htmlFor="accept-terms" className="text-sm cursor-pointer">
                    –Ø –ø—Ä–∏–Ω–∏–º–∞—é{" "}
                    <Link to="/agreement" className="text-primary hover:underline" target="_blank">
                      —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    </Link>
                    {" "}–∏{" "}
                    <Link to="/policy" className="text-primary hover:underline" target="_blank">
                      –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                    </Link>
                  </Label>
                </div>
              </div>

              {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–Ω–∏–∑—É */}
              <div className="mt-4 pt-4 border-t">
                <Button 
                  onClick={handleOrderSubmit}
                  className="w-full bg-green-600 hover:bg-green-700 text-white"
                  disabled={!acceptTerms}
                  size="lg"
                >
                  <QrCode className="h-5 w-5 mr-2" />
                  –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –°–ë–ü
                </Button>
                
                {!acceptTerms && (
                  <p className="text-sm text-muted-foreground text-center mt-2">
                    –ü—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                  </p>
                )}
              </div>
            </div>
          ) : (
            <div className="text-center space-y-4 py-8">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto">
                <QrCode className="h-8 w-8 text-green-600" />
              </div>
              <div>
                <h3 className="text-lg font-semibold mb-2">–°–ø–∞—Å–∏–±–æ!</h3>
                <p className="text-muted-foreground">
                  –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –°–ë–ü.
                </p>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </>
  );
};

export default CartPage;
